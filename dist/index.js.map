{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/assign.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolveGetter = require( '@stdlib/array-base-resolve-getter' );\n\n\n// MAIN //\n\n/**\n* Apply a mask to a provided input array and returns a new array after applying a mapping function.\n*\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @param {Function} clbk - callback to invoke\n* @param {*} [thisArg] - execution context\n* @returns {Array} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* function scale( val ) {\n*     return 10 * val;\n* }\n*\n* var y = mskfilterMap( x, mask, scale );\n* // returns [ 20, 40 ]\n*/\nfunction mskfilterMap( x, mask, clbk, thisArg ) {\n\tvar xget;\n\tvar mget;\n\tvar out;\n\tvar i;\n\n\t// Resolve accessors for retrieving array elements:\n\txget = resolveGetter( x );\n\tmget = resolveGetter( mask );\n\n\t// Extract each desired element from the provided array...\n\tout = [];\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( mget( mask, i ) ) {\n\t\t\tout.push( clbk.call( thisArg, xget( x, i ), i, x ) ); // use `Array#push` to ensure \"fast\" elements\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mskfilterMap;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n\n\n// FUNCTIONS //\n\n/**\n* Applies a mask and mapping function to an indexed array and assigns results to elements in an indexed output array.\n*\n* @private\n* @param {Collection} x - input array\n* @param {IntegerArray} mask - mask array\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} clbk - function to apply\n* @param {*} [thisArg] - function execution context\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* var out = [ 0, 0, 0, 0 ];\n*\n* function scale( x ) {\n*     return x * 10;\n* }\n*\n* var arr = indexed( x, mask, out, 1, 0, scale );\n* // returns [ 20, 40, 0, 0 ]\n*/\nfunction indexed( x, mask, out, stride, offset, clbk, thisArg ) {\n\tvar io;\n\tvar i;\n\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( mask[ i ] ) {\n\t\t\tout[ io ] = clbk.call( thisArg, x[ i ], i, x );\n\t\t\tio += stride;\n\t\t}\n\t}\n\treturn out;\n}\n\n/**\n* Applies a mask and mapping function to an input accessor array and assigns results to elements in an output accessor array.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} mask - mask array object\n* @param {Object} out - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} clbk - function to apply\n* @param {*} [thisArg] - function execution context\n* @returns {Collection} output array\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ 1, 2, 3, 4 ] );\n* var mask = toAccessorArray( [ 0, 1, 0, 1 ] );\n*\n* function scale( x ) {\n*     return x * 10;\n* }\n*\n* var out = toAccessorArray( [ 0, 0, 0, 0 ] );\n* var arr = accessors( arraylike2object( x ), arraylike2object( mask ), arraylike2object( out ), 1, 0, scale );\n*\n* var v = arr.get( 0 );\n* // returns 20\n*\n* v = arr.get( 1 );\n* // returns 40\n*/\nfunction accessors( x, mask, out, stride, offset, clbk, thisArg ) {\n\tvar xdata;\n\tvar mdata;\n\tvar odata;\n\tvar xget;\n\tvar mget;\n\tvar oset;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\tmdata = mask.data;\n\todata = out.data;\n\n\txget = x.accessors[ 0 ];\n\tmget = mask.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tio = offset;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tif ( mget( mdata, i ) ) {\n\t\t\toset( odata, io, clbk.call( thisArg, xget( xdata, i ), i, xdata ) );\n\t\t\tio += stride;\n\t\t}\n\t}\n\treturn odata;\n}\n\n\n// MAIN //\n\n/**\n* Applies a mask and mapping function to a provided input array and assigns results to elements in a provided output array.\n*\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} clbk - function to apply\n* @param {*} [thisArg] - function execution context\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* function scale( x ) {\n*     return x * 10;\n* }\n*\n* var out = [ 0, 0 ];\n* var arr = assign( x, mask, out, 1, 0, scale );\n* // returns [ 20, 40 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nfunction assign( x, mask, out, stride, offset, clbk, thisArg ) {\n\tvar xo;\n\tvar mo;\n\tvar oo;\n\n\txo = arraylike2object( x );\n\tmo = arraylike2object( mask );\n\too = arraylike2object( out );\n\tif (\n\t\txo.accessorProtocol ||\n\t\tmo.accessorProtocol ||\n\t\too.accessorProtocol\n\t) {\n\t\taccessors( xo, mo, oo, stride, offset, clbk, thisArg );\n\t\treturn out;\n\t}\n\tindexed( x, mask, out, stride, offset, clbk, thisArg );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a mask to a provided input array and return a new array after applying a mapping function.\n*\n* @module @stdlib/array-base-mskfilter-map\n*\n* @example\n* var mskfilterMap = require( '@stdlib/array-base-mskfilter-map' );\n*\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* function scale( val ) {\n*      return 10 * val;\n* }\n*\n* var y = mskfilterMap( x, mask, scale );\n* // returns [ 20, 40 ]\n*\n* @example\n* var mskfilterMap = require( '@stdlib/array-base-mskfilter-map' );\n*\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* function scale( val ) {\n*     return 10 * val;\n* }\n*\n* var out = [ 0, 0 ];\n* var arr = mskfilterMap.assign( x, mask, out, 1, 0, scale );\n* // returns [ 20, 40 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,mCAAoC,EAyBjE,SAASC,EAAcC,EAAGC,EAAMC,EAAMC,EAAU,CAC/C,IAAIC,EACAC,EACAC,EACAC,EAQJ,IALAH,EAAON,EAAeE,CAAE,EACxBK,EAAOP,EAAeG,CAAK,EAG3BK,EAAM,CAAC,EACDC,EAAI,EAAGA,EAAIP,EAAE,OAAQO,IACrBF,EAAMJ,EAAMM,CAAE,GAClBD,EAAI,KAAMJ,EAAK,KAAMC,EAASC,EAAMJ,EAAGO,CAAE,EAAGA,EAAGP,CAAE,CAAE,EAGrD,OAAOM,CACR,CAKAT,EAAO,QAAUE,ICtEjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,qCAAsC,EA+BtE,SAASC,EAASC,EAAGC,EAAMC,EAAKC,EAAQC,EAAQC,EAAMC,EAAU,CAC/D,IAAIC,EACAC,EAGJ,IADAD,EAAKH,EACCI,EAAI,EAAGA,EAAIR,EAAE,OAAQQ,IACrBP,EAAMO,CAAE,IACZN,EAAKK,CAAG,EAAIF,EAAK,KAAMC,EAASN,EAAGQ,CAAE,EAAGA,EAAGR,CAAE,EAC7CO,GAAMJ,GAGR,OAAOD,CACR,CAmCA,SAASO,EAAWT,EAAGC,EAAMC,EAAKC,EAAQC,EAAQC,EAAMC,EAAU,CACjE,IAAII,EACAC,EACAC,EACAC,EACAC,EACAC,EACAR,EACAC,EAWJ,IATAE,EAAQV,EAAE,KACVW,EAAQV,EAAK,KACbW,EAAQV,EAAI,KAEZW,EAAOb,EAAE,UAAW,CAAE,EACtBc,EAAOb,EAAK,UAAW,CAAE,EACzBc,EAAOb,EAAI,UAAW,CAAE,EAExBK,EAAKH,EACCI,EAAI,EAAGA,EAAIE,EAAM,OAAQF,IACzBM,EAAMH,EAAOH,CAAE,IACnBO,EAAMH,EAAOL,EAAIF,EAAK,KAAMC,EAASO,EAAMH,EAAOF,CAAE,EAAGA,EAAGE,CAAM,CAAE,EAClEH,GAAMJ,GAGR,OAAOS,CACR,CAgCA,SAASI,EAAQhB,EAAGC,EAAMC,EAAKC,EAAQC,EAAQC,EAAMC,EAAU,CAC9D,IAAIW,EACAC,EACAC,EAKJ,OAHAF,EAAKnB,EAAkBE,CAAE,EACzBkB,EAAKpB,EAAkBG,CAAK,EAC5BkB,EAAKrB,EAAkBI,CAAI,EAE1Be,EAAG,kBACHC,EAAG,kBACHC,EAAG,kBAEHV,EAAWQ,EAAIC,EAAIC,EAAIhB,EAAQC,EAAQC,EAAMC,CAAQ,EAC9CJ,IAERH,EAASC,EAAGC,EAAMC,EAAKC,EAAQC,EAAQC,EAAMC,CAAQ,EAC9CJ,EACR,CAKAL,EAAO,QAAUmB,IC3HjB,IAAII,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IAKbF,EAAaC,EAAM,SAAUC,CAAO,EAKpC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "resolveGetter", "mskfilterMap", "x", "mask", "clbk", "thisArg", "xget", "mget", "out", "i", "require_assign", "__commonJSMin", "exports", "module", "arraylike2object", "indexed", "x", "mask", "out", "stride", "offset", "clbk", "thisArg", "io", "i", "accessors", "xdata", "mdata", "odata", "xget", "mget", "oset", "assign", "xo", "mo", "oo", "setReadOnly", "main", "assign"]
}
