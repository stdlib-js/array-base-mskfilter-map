{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/assign.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport resolveGetter from '@stdlib/array-base-resolve-getter';\n\n\n// MAIN //\n\n/**\n* Apply a mask to a provided input array and returns a new array after applying a mapping function.\n*\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @param {Function} clbk - callback to invoke\n* @param {*} [thisArg] - execution context\n* @returns {Array} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* function scale( val ) {\n*     return 10 * val;\n* }\n*\n* var y = mskfilterMap( x, mask, scale );\n* // returns [ 20, 40 ]\n*/\nfunction mskfilterMap( x, mask, clbk, thisArg ) {\n\tvar xget;\n\tvar mget;\n\tvar out;\n\tvar i;\n\n\t// Resolve accessors for retrieving array elements:\n\txget = resolveGetter( x );\n\tmget = resolveGetter( mask );\n\n\t// Extract each desired element from the provided array...\n\tout = [];\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( mget( mask, i ) ) {\n\t\t\tout.push( clbk.call( thisArg, xget( x, i ), i, x ) ); // use `Array#push` to ensure \"fast\" elements\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default mskfilterMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\n\n\n// FUNCTIONS //\n\n/**\n* Applies a mask and mapping function to an indexed array and assigns results to elements in an indexed output array.\n*\n* @private\n* @param {Collection} x - input array\n* @param {IntegerArray} mask - mask array\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} clbk - function to apply\n* @param {*} [thisArg] - function execution context\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* var out = [ 0, 0, 0, 0 ];\n*\n* function scale( x ) {\n*     return x * 10;\n* }\n*\n* var arr = indexed( x, mask, out, 1, 0, scale );\n* // returns [ 20, 40, 0, 0 ]\n*/\nfunction indexed( x, mask, out, stride, offset, clbk, thisArg ) {\n\tvar io;\n\tvar i;\n\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( mask[ i ] ) {\n\t\t\tout[ io ] = clbk.call( thisArg, x[ i ], i, x );\n\t\t\tio += stride;\n\t\t}\n\t}\n\treturn out;\n}\n\n/**\n* Applies a mask and mapping function to an input accessor array and assigns results to elements in an output accessor array.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} mask - mask array object\n* @param {Object} out - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} clbk - function to apply\n* @param {*} [thisArg] - function execution context\n* @returns {Collection} output array\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 1, 2, 3, 4 ] );\n* var mask = toAccessorArray( [ 0, 1, 0, 1 ] );\n*\n* function scale( x ) {\n*     return x * 10;\n* }\n*\n* var out = toAccessorArray( [ 0, 0, 0, 0 ] );\n* var arr = accessors( arraylike2object( x ), arraylike2object( mask ), arraylike2object( out ), 1, 0, scale );\n*\n* var v = arr.get( 0 );\n* // returns 20\n*\n* v = arr.get( 1 );\n* // returns 40\n*/\nfunction accessors( x, mask, out, stride, offset, clbk, thisArg ) {\n\tvar xdata;\n\tvar mdata;\n\tvar odata;\n\tvar xget;\n\tvar mget;\n\tvar oset;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\tmdata = mask.data;\n\todata = out.data;\n\n\txget = x.accessors[ 0 ];\n\tmget = mask.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tio = offset;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tif ( mget( mdata, i ) ) {\n\t\t\toset( odata, io, clbk.call( thisArg, xget( xdata, i ), i, xdata ) );\n\t\t\tio += stride;\n\t\t}\n\t}\n\treturn odata;\n}\n\n\n// MAIN //\n\n/**\n* Applies a mask and mapping function to a provided input array and assigns results to elements in a provided output array.\n*\n* @param {Collection} x - input array\n* @param {Collection} mask - mask array\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} clbk - function to apply\n* @param {*} [thisArg] - function execution context\n* @returns {Collection} output array\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* function scale( x ) {\n*     return x * 10;\n* }\n*\n* var out = [ 0, 0 ];\n* var arr = assign( x, mask, out, 1, 0, scale );\n* // returns [ 20, 40 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\nfunction assign( x, mask, out, stride, offset, clbk, thisArg ) {\n\tvar xo;\n\tvar mo;\n\tvar oo;\n\n\txo = arraylike2object( x );\n\tmo = arraylike2object( mask );\n\too = arraylike2object( out );\n\tif (\n\t\txo.accessorProtocol ||\n\t\tmo.accessorProtocol ||\n\t\too.accessorProtocol\n\t) {\n\t\taccessors( xo, mo, oo, stride, offset, clbk, thisArg );\n\t\treturn out;\n\t}\n\tindexed( x, mask, out, stride, offset, clbk, thisArg );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a mask to a provided input array and return a new array after applying a mapping function.\n*\n* @module @stdlib/array-base-mskfilter-map\n*\n* @example\n* import mskfilterMap from '@stdlib/array-base-mskfilter-map';\n*\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* function scale( val ) {\n*      return 10 * val;\n* }\n*\n* var y = mskfilterMap( x, mask, scale );\n* // returns [ 20, 40 ]\n*\n* @example\n* import mskfilterMap from '@stdlib/array-base-mskfilter-map';\n*\n* var x = [ 1, 2, 3, 4 ];\n* var mask = [ 0, 1, 0, 1 ];\n*\n* function scale( val ) {\n*     return 10 * val;\n* }\n*\n* var out = [ 0, 0 ];\n* var arr = mskfilterMap.assign( x, mask, out, 1, 0, scale );\n* // returns [ 20, 40 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["mskfilterMap","x","mask","clbk","thisArg","xget","mget","out","i","resolveGetter","length","push","call","assign","stride","offset","xo","mo","oo","arraylike2object","accessorProtocol","xdata","mdata","odata","oset","io","data","accessors","indexed","setReadOnly","main"],"mappings":";;kUA+CA,SAASA,EAAcC,EAAGC,EAAMC,EAAMC,GACrC,IAAIC,EACAC,EACAC,EACAC,EAQJ,IALAH,EAAOI,EAAeR,GACtBK,EAAOG,EAAeP,GAGtBK,EAAM,GACAC,EAAI,EAAGA,EAAIP,EAAES,OAAQF,IACrBF,EAAMJ,EAAMM,IAChBD,EAAII,KAAMR,EAAKS,KAAMR,EAASC,EAAMJ,EAAGO,GAAKA,EAAGP,IAGjD,OAAOM,CACR,CC6FA,SAASM,EAAQZ,EAAGC,EAAMK,EAAKO,EAAQC,EAAQZ,EAAMC,GACpD,IAAIY,EACAC,EACAC,EAKJ,OAHAF,EAAKG,EAAkBlB,GACvBgB,EAAKE,EAAkBjB,GACvBgB,EAAKC,EAAkBZ,GAEtBS,EAAGI,kBACHH,EAAGG,kBACHF,EAAGE,kBArEL,SAAoBnB,EAAGC,EAAMK,EAAKO,EAAQC,EAAQZ,EAAMC,GACvD,IAAIiB,EACAC,EACAC,EACAlB,EACAC,EACAkB,EACAC,EACAjB,EAWJ,IATAa,EAAQpB,EAAEyB,KACVJ,EAAQpB,EAAKwB,KACbH,EAAQhB,EAAImB,KAEZrB,EAAOJ,EAAE0B,UAAW,GACpBrB,EAAOJ,EAAKyB,UAAW,GACvBH,EAAOjB,EAAIoB,UAAW,GAEtBF,EAAKV,EACCP,EAAI,EAAGA,EAAIa,EAAMX,OAAQF,IACzBF,EAAMgB,EAAOd,KACjBgB,EAAMD,EAAOE,EAAItB,EAAKS,KAAMR,EAASC,EAAMgB,EAAOb,GAAKA,EAAGa,IAC1DI,GAAMX,EAIT,CA6CEa,CAAWX,EAAIC,EAAIC,EAAIJ,EAAQC,EAAQZ,EAAMC,GACtCG,IAvHT,SAAkBN,EAAGC,EAAMK,EAAKO,EAAQC,EAAQZ,EAAMC,GACrD,IAAIqB,EACAjB,EAGJ,IADAiB,EAAKV,EACCP,EAAI,EAAGA,EAAIP,EAAES,OAAQF,IACrBN,EAAMM,KACVD,EAAKkB,GAAOtB,EAAKS,KAAMR,EAASH,EAAGO,GAAKA,EAAGP,GAC3CwB,GAAMX,EAIT,CA6GCc,CAAS3B,EAAGC,EAAMK,EAAKO,EAAQC,EAAQZ,EAAMC,GACtCG,EACR,CC/GAsB,EAAAC,EAAA,SAAAjB"}